To create new scheduler task, simply write `schedule(f, [params])`, that will create new task that will be executed at next frame,
to add modifications, like run after more delay, chain like `schedule(f, [params]).after(N)` where N - amount of frames to delay,
read more about specific chain operations, and other stuff.


0. Examples:
- Scheduler:
- - scheduler(instance_destroy).after(room_speed * 3).
- - scheduler(function(){...}).every(room_speed * 1).
- - scheduler(function(){...}).after(room_speed * 3).every(room_speed * 1).
- - scheduler(function(r){...}).http_async(http_get("https://google.com/"))
- - scheduler(function(r){...}).steam_async(steam_download_scores(...))
- - scheduler(function(r){...}).dialog_async(show_question_async("Are you fine?"))
- - scheduler(function(r){...}).sprite_async(sprite_add(...))
- - scheduler(function(r){...}).buffer_async(buffer_load_async(...))
- Aliases:
- every(room_speed * 1, function(){...})
- after(room_speed * 3, function(){...})
- http_async(http_get("https://google.com/"), function(r){...})
- steam_async(steam_download_scores(...), function(r){...})
- EXT:
- - sprite_add_async({sprite_add params}, function(r){...})


1. Aliases.
- Every chain operation have alias, which used like `after(N, f, [params])`, aliases may used for more simple task creation,
- aliases also returns chain, so you may do `after(N, f, [params]).every(N)`.


1.1 List of aliases.
- `after(N, f, [params])`;
- `every(N, f, [params])`;
- `http_async(request_id, f, [params])`;
- `steam_async(request_id, f, [params])`;
- `buffer_async(request_id, f, [params])`;
- `dialog_async(dialog_id, f, [params])`;
- `sprite_async(sprite_add_id, f, [params])`;
- EXT:
- `sprite_add_async({sprite_add params}, f, [params])`


2. Chain entry point (`schedule(f, [params])`).
- All chains should start from `schedule(f, [params])` which will be create new chain (shedule task),
- after that, you may chain to other chain operations.


3. Chain operations.
- `*.after(N)`
- - Will execute task after given N frames.
- `*.every(N)`
- - Will execute task every given N frames.
- `*.http_async(request_id)`
- - Will execute task after HTTP response is come.
- - also will stop ticking (`every`, `after` will not work).
- All other async operations will behave like `http_async` which is described above.

4. Callbacks result.
- For `after` tasks:
- - If callback returns undefined (or not returns any), this will be simply mark task as completed and delete it.
- - If callback returns false, this will retry callback after next frame.
- - If callback returns true, this will restart task, from base `after` delay.
- For `every` tasks:
- - If callback returns undefined (or not returns any), this will be simply continue every execution.
- - If callback returns any other, this will stop executing every frame (By marking task as completed).
- For all async tasks (http_async, steam_async, buffer_async, and other...):
- - Not applicable.